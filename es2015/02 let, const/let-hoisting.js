"use strict";
debugger;

console.log(sports);  // undefined, 호이스팅에 의해 변수선언 + undefined 자동초기화
var sports = "축구";

console.log(music);  // error, 호이스팅이 발생되지않아서 music 변수 자체를 인식못함
let music = "재즈";


/*
 * # 호이스팅 원리 및 실행 순서
 *  (참조 : https://www.slideshare.net/OhgyunAhn/javascript-hoisting)
 *
 *  ## 요약
 *  - 호이스팅은 활성화객체의 할당방식에 따른 현상
 *  - 함수가 실행될때마다 활성화객체가 생성됨
 *  - 활성화객체에는 파라미터정보,변수선언,함수선언 이 포함됨
 *    (모든파라미터정보, 파라미터의 이름과 값을 할당, 값이없는경우 undefined 할당)
 *    (모든함수선언, 함수의 이름과 정의를 할당, 이미정의되어있는경우 덮어씀)
 *    (모든변수선언, 변수의 이름과 undefined 할당, 이미정의되어있는경우 undefined 할당하지않음)
 *  - 실행시점에서 변수를 만났을때, 활성화객체의 값을 찾거나 설정함
 *  - 함수표현식은 활성화객체에 할당되지않음
 *
 *
 *  ## 원리
 *  - var 변수의 유효범위는 블럭이 아닌 함수
 *  - 즉시실행함수로 유효범위를 제한할수는 있음
 *  - 변수선언과 함수선언은 인터프리터에 의해 현재실행함수의 맨앞으로 끌어올려짐
 *    (= 변수선언은 함수의 맨앞으로 끌어올려짐)
 *    (= 함수선언 역시 함수정의문 통째로 맨앞으로 끌어올려짐)
 *    (= 함수표현식의 경우 함수명만 맨앞으로 끌어올려짐)
 *  - 변수선언은 호이스팅으로 맨앞으로,
 *    변수할당은 실행시점에서 수행됨
 *
 *  ## 실행순서
 *  1. 함수 foo 가 호출되면
 *  2. foo 의 실행 컨텍스트가 생성되고
 *  3. 실행 컨텍스트는 함수를 실행하기전에 활성화객체(ActiveObject)를 생성한다.
 *  4. 활성화객체에는 파라미터정보, 변수선언, 함수정의 가 포함된다
 *  5. 함수가 실행되고 변수를 만났을때,
 *     유효범위 체인에 따라  활성화객체에서 먼저 찾고(호이스팅) 상위탐색을 진행한다.
 */
